# -*- coding: utf-8 -*-
# Generated by Django 1.11.16 on 2018-11-07 14:08
from __future__ import unicode_literals

from django.db import migrations
from django.conf import settings


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0001_initial'),
    ]

    ops = [
        (
            '''
            CREATE SCHEMA IF NOT EXISTS research;
            ''',
            '''
            DROP SCHEMA IF EXISTS "research";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."forschung_programm" (
                FORSCHUNG_PROGRAMM_ID numeric,
                FORSCHUNG_PROGRAMM_NAME varchar,
                AKTIV_JN varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'FORSCHUNG_PROGRAMM_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."forschung_programm";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."forschung_art" (
                FORSCHUNG_ART_ID numeric,
                FORSCHUNG_ART_DE varchar,
                FORSCHUNG_ART_EN varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'FORSCHUNG_ART_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."forschung_art";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."geldgeber" (
                GELDGEBER_ID numeric,
                GELDGEBER_DE varchar,
                GELDGEBER_EN varchar,
                STRASSE varchar,
                ORT varchar,
                POSTLEITZAHL varchar,
                LAND_ID numeric,
                URL varchar,
                GELDGEBER_TYP_ID numeric
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'GELDGEBER',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."geldgeber";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."geldgeber_typ" (
                GELDGEBER_TYP_ID numeric,
                GELDGEBER_TYP_DE varchar,
                GELDGEBER_TYP_EN varchar,
                GELDGEBER_TYP_KURZ varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'GELDGEBER_TYP_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."geldgeber_typ";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."land" (
                LAND_ID numeric,
                LAND_DE varchar,
                LAND_EN varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'LAND_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."land";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."org_partner_projektfunktion" (
                ORG_PARTNER_PROJEKTFUNKTION_ID numeric,
                ORG_PARTNER_PROJEKTFUNKTION_DE varchar,
                ORG_PARTNER_PROJEKTFUNKTION_EN varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'ORG_PARTNER_PROJEKTFUNKTION_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."org_partner_projektfunktion";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."projekt_typ" (
                PROJEKT_TYP_ID numeric,
                PROJEKT_TYP_DE varchar,
                PROJEKT_TYP_EN varchar,
                PROJEKT_TYP_KURZ_DE varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'PROJEKT_TYP_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."projekt_typ";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."projekt" (
                PROJEKT_ID numeric,
                ORGEINHEIT_ID numeric,
                PROJEKT_TYP_ID numeric,
                KURZBEZEICHNUNG varchar,
                PROJEKTTITEL_DE varchar,
                PROJEKTTITEL_EN varchar,
                ORG_PARTNER_PROJEKTFUNKTION_ID numeric,
                PROJEKTLEITER_ID numeric,
                KONTAKTPERSON_ID numeric,
                PROJEKT_STATUS_ID numeric,
                PROJEKT_URL varchar,
                ABSTRACT_DE varchar,
                ABSTRACT_EN varchar,
                PROJEKTBEGINN_GEPLANT timestamp,
                PROJEKTBEGINN_EFFEKTIV timestamp,
                PROJEKTENDE_GEPLANT timestamp,
                PROJEKTENDE_EFFEKTIV timestamp,
                VERGABE_ART_ID numeric,
                FORSCHUNG_ART_ID numeric,
                VERANSTALTUNG_ART_ID numeric,
                STUDIE_ART_ID numeric,
                SPRACHE_ID numeric,
                STAMMDATEN_UEBERTRAGUNG timestamp,
                FORSCHUNG_PROGRAMM_ID numeric,
                FORSCHUNG_SUBPROGRAMM varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'PROJEKT',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."projekt";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."projekt_geldgeber" (
                PROJEKT_ID numeric,
                GELDGEBER_ID numeric,
                HAUPTGELDGEBER_JA_NEIN varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'PROJEKT_GELDGEBER',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."projekt_geldgeber";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."projekt_status" (
                PROJEKT_STATUS_ID numeric,
                PROJEKT_STATUS varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'PROJEKT_STATUS_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."projekt_status";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."sprache" (
                SPRACHE_ID numeric,
                SPRACHE_DE varchar,
                SPRACHE_EN varchar,
                SPRACHE_EN_KURZ varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'SPRACHE_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."sprache";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."studie_art" (
                STUDIE_ART_ID numeric,
                STUDIE_ART_DE varchar,
                STUDIE_ART_EN varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'STUDIE_ART_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."studie_art";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."veranstaltung_art" (
                VERANSTALTUNG_ART_ID numeric,
                VERANSTALTUNG_ART_DE varchar,
                VERANSTALTUNG_ART_EN varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'VERANSTALTUNG_ART_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."veranstaltung_art";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."vergabe_art" (
                VERGABE_ART_ID numeric,
                VERGABE_ART_DE varchar,
                VERGABE_ART_EN varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'VERGABE_ART_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."vergabe_art";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."person_publikation" (
                MEDONLINE_PERSON_ID numeric,
                PUBLIKATION_ID numeric
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'PERSON_PUBLIKATION',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."person_publikation";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."orgeinheit_publikation" (
                PUBLIKATION_ID numeric,
                MEDONLINE_ID numeric,
                PUBLIKATION_AUTORENSCHAFT_ID numeric,
                ZUORDNUNGSDATUM timestamp
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'ORGEINHEIT_PUBLIKATION',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."orgeinheit_publikation";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."publikation_typ" (
                PUBLIKATION_TYP_ID numeric,
                PUBLIKATION_TYP_DE varchar,
                PUBLIKATION_TYP_EN varchar,
                SORTIERUNG_ID numeric
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'PUBLIKATION_TYP_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."publikation_typ";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."publikation_dokumenttyp" (
                PUBLIKATION_DOKUMENTTYP_ID numeric,
                PUBLIKATION_DOKUMENTTYP_DE varchar,
                PUBLIKATION_DOKUMENTTYP_EN varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'PUBLIKATION_DOKUMENTTYP_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."publikation_dokumenttyp";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."publikation" (
                PUBLIKATION_ID varchar,
                TITEL varchar,
                AUTOR varchar,
                JAHR numeric,
                QUELLE varchar,
                PUBLIKATION_TYP_ID numeric,
                PUBLIKATION_DOKUMENTTYP_ID numeric,
                SCI_ID varchar,
                PUBMED_ID varchar,
                DOI varchar,
                PMC_ID varchar,
                ABSTRACT bytea,
                IMPACT_FAKTOR_NORM_MAX numeric
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'PUBLIKATION',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."publikation";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."klassifikation_oestat_2012" (
                KLASSIFIKATION_OESTAT_ID numeric,
                KLASSIFIKATION_OESTAT_DE varchar,
                KLASSIFIKATION_OESTAT_EN varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'KLASSIFIKATION_OESTAT_2012_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."klassifikation_oestat_2012";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."person_fachkenntnis" (
                PERSON_FACHKENNTNIS_ID numeric,
                MEDONLINE_PERSON_ID numeric,
                FACHKENNTNIS_DE varchar,
                FACHKENNTNIS_EN varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'PERSON_FACHKENNTNIS',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."person_fachkenntnis";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."person_kenntnis" (
                PERSON_KENNTNIS_ID numeric,
                MEDONLINE_PERSON_ID numeric,
                KENNTNIS_DE varchar,
                KENNTNIS_EN varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'PERSON_KENNTNIS',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."person_kenntnis";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."person_klass_oestat_2012" (
                KLASSIFIKATION_OESTAT_ID numeric,
                MEDONLINE_PERSON_ID numeric
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'PERSON_KLASS_OESTAT_2012',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."person_klass_oestat_2012";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."person_weiterbildung" (
                PERSON_WEITERBILDUNG_ID numeric,
                MEDONLINE_PERSON_ID numeric,
                PERSON_WEITERBILDUNG_DE varchar,
                PERSON_WEITERBILDUNG_EN varchar,
                JAHR varchar,
                JAHR_BIS varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'PERSON_WEITERBILDUNG',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."person_weiterbildung";
            ''',
        ),
        (
            '''
            CREATE FOREIGN TABLE "research"."publikation_autorenschaft" (
                PUBLIKATION_AUTORENSCHAFT_ID numeric,
                PUBLIKATION_AUTORENSCHAFT_DE varchar,
                PUBLIKATION_AUTORENSCHAFT_EN varchar
            )
            SERVER sqlalchemy OPTIONS (
                tablename 'PUBLIKATION_AUTORENSCHAFT_L',
                db_url '{}'
            );
            '''.format(settings.MULTICORN.get('research')),
            '''
            DROP FOREIGN TABLE IF EXISTS "research"."publikation_autorenschaft";
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_classification" AS SELECT
                KLASSIFIKATION_OESTAT_ID::integer AS id,
                hstore(
                    ARRAY['de', 'en'],
                    ARRAY[KLASSIFIKATION_OESTAT_DE, KLASSIFIKATION_OESTAT_EN]
                ) AS name
            FROM
                "research"."klassifikation_oestat_2012"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_classification";
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_classification_person" AS SELECT
                KLASSIFIKATION_OESTAT_ID::integer AS classification_id,
                MEDONLINE_PERSON_ID::integer AS person_id
            FROM
                "research"."person_klass_oestat_2012"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_classification_person";
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_expertise" AS SELECT
                PERSON_FACHKENNTNIS_ID::integer AS id,
                MEDONLINE_PERSON_ID::integer AS person_id,
                hstore(
                    ARRAY['de', 'en'],
                    ARRAY[FACHKENNTNIS_DE, FACHKENNTNIS_EN]
                ) AS name
            FROM
                "research"."person_fachkenntnis"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_expertise";
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_knowledge" AS SELECT
                PERSON_KENNTNIS_ID::integer AS id,
                MEDONLINE_PERSON_ID::integer AS person_id,
                hstore(
                    ARRAY['de', 'en'],
                    ARRAY[KENNTNIS_DE, KENNTNIS_EN]
                ) AS name
            FROM
                "research"."person_kenntnis"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_knowledge";
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_education" AS SELECT
                PERSON_WEITERBILDUNG_ID::integer AS id,
                MEDONLINE_PERSON_ID::integer AS person_id,
                hstore(
                    ARRAY['de', 'en'],
                    ARRAY[PERSON_WEITERBILDUNG_DE, PERSON_WEITERBILDUNG_EN]
                ) AS name,
                JAHR::integer AS from,
                JAHR_BIS::integer AS to
            FROM
                "research"."person_weiterbildung"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_education";
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_publicationauthorship" AS SELECT
                PUBLIKATION_AUTORENSCHAFT_ID::integer AS id,
                hstore(
                    ARRAY['de', 'en'],
                    ARRAY[PUBLIKATION_AUTORENSCHAFT_DE, PUBLIKATION_AUTORENSCHAFT_EN]
                ) AS name
            FROM
                "research"."publikation_autorenschaft"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_publicationauthorship";
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_program" AS SELECT
                FORSCHUNG_PROGRAMM_ID::integer AS id,
                FORSCHUNG_PROGRAMM_NAME AS name,
                COALESCE((LOWER(AKTIV_JN) = 'n'), FALSE)::boolean AS active
            FROM
                "research"."forschung_programm"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_program";
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_projectresearch" AS SELECT
                FORSCHUNG_ART_ID::integer AS id,
                FORSCHUNG_ART_DE AS name
            FROM
                "research"."forschung_art"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_projectresearch";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_projectresearch_id_idx ON "public"."research_projectresearch" ("id");
            ''',
            '''
            DROP INDEX IF EXISTS research_projectresearch_id_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_funder" AS SELECT
                GELDGEBER_ID::integer AS id,
                GELDGEBER_DE AS name,
                STRASSE AS street,
                ORT AS city,
                POSTLEITZAHL AS zipcode,
                LAND_ID::integer AS country_id,
                URL,
                GELDGEBER_TYP_ID::integer AS category_id
            FROM
                "research"."geldgeber"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_funder";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_funder_id_idx ON "public"."research_funder" ("id");
            ''',
            '''
            DROP INDEX IF EXISTS research_funder_id_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_fundercategory" AS SELECT
                GELDGEBER_TYP_ID::integer AS id,
                GELDGEBER_TYP_DE AS name,
                GELDGEBER_TYP_KURZ AS short
            FROM
                "research"."geldgeber_typ"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_fundercategory";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_fundercategory_id_idx ON "public"."research_fundercategory" ("id");
            ''',
            '''
            DROP INDEX IF EXISTS research_fundercategory_id_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_country" AS SELECT
                LAND_ID::integer AS id,
                LAND_DE AS name
            FROM
                "research"."land"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_country";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_country_id_idx ON "public"."research_country" ("id");
            ''',
            '''
            DROP INDEX IF EXISTS research_country_id_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_projectpartnerfunction" AS SELECT
                ORG_PARTNER_PROJEKTFUNKTION_ID::integer AS id,
                ORG_PARTNER_PROJEKTFUNKTION_DE AS name
            FROM
                "research"."org_partner_projektfunktion"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_projectpartnerfunction";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_projectpartnerfunction_id_idx ON "public"."research_projectpartnerfunction" ("id");
            ''',
            '''
            DROP INDEX IF EXISTS research_projectpartnerfunction_id_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_project" AS SELECT
                PROJEKT_ID::integer AS id,
                ORGEINHEIT_ID::integer AS organization_id,
                PROJEKT_TYP_ID::integer AS category_id,
                KURZBEZEICHNUNG AS short,
                hstore(
                    ARRAY['de', 'en'],
                    ARRAY[PROJEKTTITEL_DE, PROJEKTTITEL_EN]
                ) AS title,
                ORG_PARTNER_PROJEKTFUNKTION_ID::integer AS partner_function_id,
                PROJEKTLEITER_ID::integer AS manager_id,
                KONTAKTPERSON_ID::integer AS contact_id,
                PROJEKT_STATUS_ID::integer AS status_id,
                PROJEKT_URL AS url,
                hstore(
                    ARRAY['de', 'en'],
                    ARRAY[ABSTRACT_DE, ABSTRACT_EN]
                ) AS abstract,
                PROJEKTBEGINN_GEPLANT::timestamptz AS begin_planned,
                PROJEKTBEGINN_EFFEKTIV::timestamptz AS begin_effective,
                PROJEKTENDE_GEPLANT::timestamptz AS end_planned,
                PROJEKTENDE_EFFEKTIV::timestamptz AS end_effective,
                VERGABE_ART_ID::integer AS grant_id,
                FORSCHUNG_ART_ID::integer AS research_id,
                VERANSTALTUNG_ART_ID::integer AS event_id,
                STUDIE_ART_ID::integer AS study_id,
                SPRACHE_ID::integer AS language_id,
                STAMMDATEN_UEBERTRAGUNG::timestamptz AS assignment,
                FORSCHUNG_PROGRAMM_ID::integer AS program_id,
                FORSCHUNG_SUBPROGRAMM AS subprogram
            FROM
                research.projekt
            INNER JOIN
                campusonline.personen AS co_p_m
                ON projekt.projektleiter_id::integer = co_p_m.pers_nr::integer
            INNER JOIN
                campusonline.personen AS co_p_c
                ON projekt.kontaktperson_id::integer = co_p_c.pers_nr::integer
            INNER JOIN
                campusonline.organisationen AS co_o
                ON projekt.orgeinheit_id::integer = co_o.nr::integer
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_project";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_project_id_idx ON "public"."research_project" ("id");
            ''',
            '''
            DROP INDEX IF EXISTS research_project_id_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_project_funder" AS SELECT
                PROJEKT_ID::integer AS project_id,
                GELDGEBER_ID::integer AS funder_id,
                CASE lower(HAUPTGELDGEBER_JA_NEIN) WHEN 'ja' THEN TRUE ELSE FALSE END AS primary
            FROM
                "research"."projekt_geldgeber"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_project_funder";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_project_funder_idx ON "public"."research_project_funder" ("project_id", "funder_id");
            ''',
            '''
            DROP INDEX IF EXISTS research_project_funder_idx;
            ''',
        ),
        (
            '''
            CREATE INDEX research_project_funder_project_id_idx ON "public"."research_project_funder" ("project_id");
            ''',
            '''
            DROP INDEX IF EXISTS research_project_funder_project_id_idx;
            ''',
        ),
        (
            '''
            CREATE INDEX research_project_funder_funder_id_idx ON "public"."research_project_funder" ("funder_id");
            ''',
            '''
            DROP INDEX IF EXISTS research_project_funder_funder_id_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_language" AS SELECT
                SPRACHE_ID::integer AS id,
                SPRACHE_DE AS name,
                SPRACHE_EN_KURZ AS iso
            FROM
                "research"."sprache";
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_language";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_language_id_idx ON "public"."research_language" ("id");
            ''',
            '''
            DROP INDEX IF EXISTS research_language_id_idx;
            ''',
        ),
        (
            '''
            CREATE INDEX research_language_iso_idx ON "public"."research_language" ("iso");
            ''',
            '''
            DROP INDEX IF EXISTS research_language_iso_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_projectstudy" AS SELECT
                STUDIE_ART_ID::integer AS id,
                STUDIE_ART_DE AS name
            FROM
                "research"."studie_art";
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_projectstudy";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_projectstudy_id_idx ON "public"."research_projectstudy" ("id");
            ''',
            '''
            DROP INDEX IF EXISTS research_projectstudy_id_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_projectevent" AS SELECT
                VERANSTALTUNG_ART_ID::integer AS id,
                VERANSTALTUNG_ART_DE AS name
            FROM
                "research"."veranstaltung_art";
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_projectevent";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_projectevent_id_idx ON "public"."research_projectevent" ("id");
            ''',
            '''
            DROP INDEX IF EXISTS research_projectevent_id_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_projectgrant" AS SELECT
                VERGABE_ART_ID::integer AS id,
                VERGABE_ART_DE AS name
            FROM
                "research"."vergabe_art"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_projectgrant";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_projectgrant_id_idx ON "public"."research_projectgrant" ("id");
            ''',
            '''
            DROP INDEX IF EXISTS research_projectgrant_id_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_publication_person" AS SELECT
                person_publikation.publikation_id::integer AS publication_id,
                person_publikation.medonline_person_id::integer AS person_id
            FROM
                research.person_publikation
            INNER JOIN
                research.publikation r_p
                ON person_publikation.publikation_id::integer = r_p.publikation_id::integer
            INNER JOIN
                campusonline.personen co_p
                ON person_publikation.medonline_person_id::integer = co_p.pers_nr::integer
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_publication_person";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_publication_person_idx ON "public"."research_publication_person" ("publication_id", "person_id");
            ''',
            '''
            DROP INDEX IF EXISTS research_publication_person_idx;
            ''',
        ),
        (
            '''
            CREATE INDEX research_publication_person_publication_id_idx ON "public"."research_publication_person" ("publication_id");
            ''',
            '''
            DROP INDEX IF EXISTS research_publication_person_publication_id_idx;
            ''',
        ),
        (
            '''
            CREATE INDEX research_publication_person_person_id_idx ON "public"."research_publication_person" ("person_id");
            ''',
            '''
            DROP INDEX IF EXISTS research_publication_person_person_id_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_publicationorganization" AS SELECT DISTINCT
                FORMAT(
                    '%s-%s',
                    r_op.PUBLIKATION_ID::integer,
                    r_op.MEDONLINE_ID::integer
                ) AS id,
                r_op.PUBLIKATION_ID::integer AS publication_id,
                r_op.MEDONLINE_ID::integer AS organization_id,
                r_op.PUBLIKATION_AUTORENSCHAFT_ID:: integer AS authorship_id,
                r_op.ZUORDNUNGSDATUM::timestamptz AS assigned
            FROM
                research.orgeinheit_publikation r_op
            INNER JOIN
                research.publikation r_p
                ON r_op.PUBLIKATION_ID::integer = r_p.PUBLIKATION_ID::integer
            INNER JOIN
                campusonline.organisationen co_o
                ON r_op.MEDONLINE_ID::integer = co_o.NR::integer
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_publicationorganization";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_publicationorganization_idx ON "public"."research_publicationorganization" ("publication_id", "organization_id");
            ''',
            '''
            DROP INDEX IF EXISTS research_publicationorganization_idx;
            ''',
        ),
        (
            '''
            CREATE INDEX research_publicationorganization_publication_id_idx ON "public"."research_publicationorganization" ("publication_id");
            ''',
            '''
            DROP INDEX IF EXISTS research_publicationorganization_publication_id_idx;
            ''',
        ),
        (
            '''
            CREATE INDEX research_publicationorganization_organization_id_idx ON "public"."research_publicationorganization" ("organization_id");
            ''',
            '''
            DROP INDEX IF EXISTS research_publicationorganization_organization_id_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_publicationcategory" AS SELECT
                PUBLIKATION_TYP_ID::integer AS id,
                hstore(
                    ARRAY['de', 'en'],
                    ARRAY[PUBLIKATION_TYP_DE, PUBLIKATION_TYP_EN]
                ) AS name
            FROM
                "research"."publikation_typ";
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_publicationcategory";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_publicationcategory_id_idx ON "public"."research_publicationcategory" ("id");
            ''',
            '''
            DROP INDEX IF EXISTS research_publicationcategory_id_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_publicationdocument" AS SELECT
                PUBLIKATION_DOKUMENTTYP_ID::integer AS id,
                hstore(
                    ARRAY['de', 'en'],
                    ARRAY[PUBLIKATION_DOKUMENTTYP_DE, PUBLIKATION_DOKUMENTTYP_EN]
                ) AS name
            FROM
                "research"."publikation_dokumenttyp";
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_publicationdocument";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_publicationdocument_id_idx ON "public"."research_publicationdocument" ("id");
            ''',
            '''
            DROP INDEX IF EXISTS research_publicationdocument_id_idx;
            ''',
        ),
        (
            '''
            CREATE MATERIALIZED VIEW "public"."research_publication" AS SELECT
                PUBLIKATION_ID::integer AS id,
                TITEL AS title,
                regexp_split_to_array(trim(both ' ' from AUTOR), ';\s*') AS authors,
                JAHR::integer AS year,
                QUELLE AS source,
                PUBLIKATION_TYP_ID::integer AS category_id,
                PUBLIKATION_DOKUMENTTYP_ID::integer AS document_id,
                SCI_ID AS sci,
                PUBMED_ID AS pubmed,
                DOI AS doi,
                PMC_ID AS pmc,
                ABSTRACT AS abstract_bytes
            FROM
                "research"."publikation"
            ''',
            '''
            DROP MATERIALIZED VIEW IF EXISTS "public"."research_publication";
            ''',
        ),
        (
            '''
            CREATE UNIQUE INDEX research_publication_id_idx ON "public"."research_publication" ("id");
            ''',
            '''
            DROP INDEX IF EXISTS research_publication_id_idx;
            ''',
        ),
        (
            '''
            CREATE INDEX research_publication_year_idx ON "public"."research_publication" ("year");
            ''',
            '''
            DROP INDEX IF EXISTS research_publication_year_idx;
            ''',
        ),
        (
            '''
            CREATE INDEX research_publication_category_id_idx ON "public"."research_publication" ("category_id");
            ''',
            '''
            DROP INDEX IF EXISTS research_publication_category_id_idx;
            ''',
        ),
        (
            '''
            CREATE INDEX research_publication_document_id_idx ON "public"."research_publication" ("document_id");
            ''',
            '''
            DROP INDEX IF EXISTS research_publication_document_id_idx;
            ''',
        )
    ]

    operations = [
        migrations.RunSQL(
            [forward for forward, reverse in ops],
            [reverse for forward, reverse in reversed(ops)]
        )
    ]
