# -*- coding: utf-8 -*-
# Generated by Django 1.11.16 on 2018-11-07 14:08
from __future__ import unicode_literals

from django.db import migrations
from django.conf import settings


class Migration(migrations.Migration):

    initial = True

    forward = [
        '''
        CREATE SCHEMA IF NOT EXISTS research;
        ''',
        '''
        CREATE FOREIGN TABLE "research"."person_campusonline" (
            PERSON_ID numeric,
            MEDONLINE_PERSON_ID numeric
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'PERSON_MEDONLINE',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE FOREIGN TABLE "research"."person_publikation" (
            PERSON_ID numeric,
            PUBLIKATION_ID numeric
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'PERSON_PUBLIKATION',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE FOREIGN TABLE "research"."orgeinheit_campusonline" (
            ORGEINHEIT_ID numeric,
            ORGEINHEIT_ID_M numeric
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'ORGEINHEIT',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE FOREIGN TABLE "research"."orgeinheit_publikation" (
            PUBLIKATION_ID numeric,
            ORGEINHEIT_ID numeric
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'ORGEINHEIT_PUBLIKATION',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE FOREIGN TABLE "research"."pubmed_import" (
            PUBMED_ID varchar,
            ABSTRACTTEXT varchar
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'PUBMED_IMPORT',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE FOREIGN TABLE "research"."publikation_sci_daten" (
            SCI_ID varchar,
            ABSTRACT varchar
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'PUBLIKATION_SCI_DATEN',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE FOREIGN TABLE "research"."publikation_typ" (
            PUBLIKATION_TYP_ID numeric,
            PUBLIKATION_TYP_DE varchar,
            PUBLIKATION_TYP_EN varchar,
            SORTIERUNG_ID numeric
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'PUBLIKATION_TYP_L',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE FOREIGN TABLE "research"."publikation_dokumenttyp" (
            PUBLIKATION_DOKUMENTTYP_ID numeric,
            PUBLIKATION_DOKUMENTTYP_DE varchar,
            PUBLIKATION_DOKUMENTTYP_EN varchar
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'PUBLIKATION_DOKUMENTTYP_L',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE FOREIGN TABLE "research"."publikation" (
            PUBLIKATION_ID varchar,
            AUTOR varchar,
            JAHR numeric,
            QUELLE varchar,
            PUBLIKATION_TYP_ID numeric,
            PUBLIKATION_DOKUMENTTYP_ID numeric,
            SCI_ID varchar,
            PUBMED_ID varchar,
            DOI varchar,
            PMC_ID varchar,
            MEDONLINE_PUB_ID numeric
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'PUBLIKATION',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE VIEW "public"."research_publication_person" AS SELECT
            pp.publikation_id::integer AS publication_id,
            pc.medonline_person_id::integer AS person_id
        FROM
            "research"."person_campusonline" AS pc,
            "research"."person_publikation" AS pp
        WHERE
            pc.person_id::integer = pp.person_id::integer;
        ''',
        '''
        CREATE VIEW "public"."research_publication_organization" AS SELECT
            op.publikation_id::integer AS publication_id,
            oc.orgeinheit_id_m::integer AS organization_id
        FROM
            "research"."orgeinheit_campusonline" AS oc,
            "research"."orgeinheit_publikation" AS op
        WHERE
            oc.orgeinheit_id::integer = op.orgeinheit_id::integer;
        ''',
        '''
        CREATE VIEW "public"."research_category" AS SELECT
            publikation_typ_id::integer AS id,
            hstore(
                ARRAY['de', 'en'],
                ARRAY[publikation_typ_de, publikation_typ_en]
            ) AS name
        FROM
            "research"."publikation_typ";
        ''',
        '''
        CREATE VIEW "public"."research_document" AS SELECT
            publikation_dokumenttyp_id::integer AS id,
            hstore(
                ARRAY['de', 'en'],
                ARRAY[publikation_dokumenttyp_de, publikation_dokumenttyp_en]
            ) AS name
        FROM
            "research"."publikation_dokumenttyp";
        ''',
        '''
        CREATE VIEW "public"."research_publication" AS SELECT
            p.publikation_id::integer AS id,
            p.autor AS author,
            p.jahr::integer AS year,
            p.quelle AS source,
            p.publikation_typ_id::integer AS category_id,
            p.publikation_dokumenttyp_id::integer AS document_id,
            p.sci_id AS sci,
            p.pubmed_id AS pubmed,
            p.doi AS doi,
            p.pmc_id AS pmc,
            COALESCE(pi.abstracttext, psd.abstract) AS abstract
        FROM
            "research"."publikation" AS p
        INNER JOIN
            "research"."pubmed_import" AS pi
            ON p.pubmed_id = pi.pubmed_id
        INNER JOIN
            "research"."publikation_sci_daten" AS psd
            ON p.sci_id = psd.sci_id
        ''',
    ]
    reverse = [
        '''
        DROP VIEW IF EXISTS "public"."research_publication";
        ''',
        '''
        DROP VIEW IF EXISTS "public"."research_document";
        ''',
        '''
        DROP VIEW IF EXISTS "public"."research_category";
        ''',
        '''
        DROP VIEW IF EXISTS "public"."research_publication_organization";
        ''',
        '''
        DROP VIEW IF EXISTS "public"."research_publication_person";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."publikation";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."publikation_dokumenttyp";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."publikation_typ";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."publikation_sci_daten";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."pubmed_import";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."orgeinheit_publikation";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."orgeinheit_campusonline";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."person_publikation";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."person_campusonline";
        ''',
    ]

    dependencies = [
        ('base', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL(
            forward,
            reverse
        )
    ]
