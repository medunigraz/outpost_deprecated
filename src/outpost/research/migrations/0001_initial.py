# -*- coding: utf-8 -*-
# Generated by Django 1.11.16 on 2018-11-07 14:08
from __future__ import unicode_literals

from django.db import migrations
from django.conf import settings


class Migration(migrations.Migration):

    initial = True

    forward = [
        '''
        CREATE SCHEMA IF NOT EXISTS research;
        ''',
        '''
        CREATE FOREIGN TABLE "research"."person_campusonline" (
            PERSON_ID numeric,
            MEDONLINE_PERSON_ID numeric
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'PERSON_MEDONLINE',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE FOREIGN TABLE "research"."person_publikation" (
            PERSON_ID numeric,
            PUBLIKATION_ID numeric
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'PERSON_PUBLIKATION',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE FOREIGN TABLE "research"."orgeinheit_campusonline" (
            ORGEINHEIT_ID numeric,
            ORGEINHEIT_ID_M numeric
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'ORGEINHEIT',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE FOREIGN TABLE "research"."orgeinheit_publikation" (
            PUBLIKATION_ID numeric,
            ORGEINHEIT_ID numeric
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'ORGEINHEIT_PUBLIKATION',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE FOREIGN TABLE "research"."publikation_typ" (
            PUBLIKATION_TYP_ID numeric,
            PUBLIKATION_TYP_DE varchar,
            PUBLIKATION_TYP_EN varchar,
            SORTIERUNG_ID numeric
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'PUBLIKATION_TYP_L',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE FOREIGN TABLE "research"."publikation_dokumenttyp" (
            PUBLIKATION_DOKUMENTTYP_ID numeric,
            PUBLIKATION_DOKUMENTTYP_DE varchar,
            PUBLIKATION_DOKUMENTTYP_EN varchar
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'PUBLIKATION_DOKUMENTTYP_L',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE FOREIGN TABLE "research"."publikation" (
            PUBLIKATION_ID varchar,
            AUTOR varchar,
            JAHR numeric,
            QUELLE varchar,
            PUBLIKATION_TYP_ID numeric,
            PUBLIKATION_DOKUMENTTYP_ID numeric,
            SCI_ID varchar,
            PUBMED_ID varchar,
            DOI varchar,
            PMC_ID varchar,
            ABSTRACT bytea
        )
        SERVER sqlalchemy OPTIONS (
            tablename 'PUBLIKATION',
            db_url '{}'
        );
        '''.format(settings.MULTICORN.get('research')),
        '''
        CREATE MATERIALIZED VIEW "public"."research_publication_person" AS SELECT
            pp.publikation_id::integer AS publication_id,
            pc.medonline_person_id::integer AS person_id
        FROM
            "research"."person_campusonline" AS pc,
            "research"."person_publikation" AS pp
        WHERE
            pc.person_id::integer = pp.person_id::integer;
        ''',
        '''
        CREATE UNIQUE INDEX research_publication_person_idx ON "public"."research_publication_person" ("publication_id", "person_id");
        ''',
        '''
        CREATE INDEX research_publication_person_publication_id_idx ON "public"."research_publication_person" ("publication_id");
        ''',
        '''
        CREATE INDEX research_publication_person_person_id_idx ON "public"."research_publication_person" ("person_id");
        ''',
        '''
        CREATE MATERIALIZED VIEW "public"."research_publication_organization" AS SELECT DISTINCT
            op.publikation_id::integer AS publication_id,
            oc.orgeinheit_id_m::integer AS organization_id
        FROM
            "research"."orgeinheit_campusonline" AS oc,
            "research"."orgeinheit_publikation" AS op
        WHERE
            oc.orgeinheit_id::integer = op.orgeinheit_id::integer
        GROUP BY publication_id, organization_id;
        ''',
        '''
        CREATE UNIQUE INDEX research_publication_organization_idx ON "public"."research_publication_organization" ("publication_id", "organization_id");
        ''',
        '''
        CREATE INDEX research_publication_organization_publication_id_idx ON "public"."research_publication_organization" ("publication_id");
        ''',
        '''
        CREATE INDEX research_publication_organization_organization_id_idx ON "public"."research_publication_organization" ("organization_id");
        ''',
        '''
        CREATE MATERIALIZED VIEW "public"."research_category" AS SELECT
            publikation_typ_id::integer AS id,
            hstore(
                ARRAY['de', 'en'],
                ARRAY[publikation_typ_de, publikation_typ_en]
            ) AS name
        FROM
            "research"."publikation_typ";
        ''',
        '''
        CREATE UNIQUE INDEX research_category_id_idx ON "public"."research_category" ("id");
        ''',
        '''
        CREATE MATERIALIZED VIEW "public"."research_document" AS SELECT
            publikation_dokumenttyp_id::integer AS id,
            hstore(
                ARRAY['de', 'en'],
                ARRAY[publikation_dokumenttyp_de, publikation_dokumenttyp_en]
            ) AS name
        FROM
            "research"."publikation_dokumenttyp";
        ''',
        '''
        CREATE UNIQUE INDEX research_document_id_idx ON "public"."research_document" ("id");
        ''',
        '''
        CREATE MATERIALIZED VIEW "public"."research_publication" AS SELECT
            publikation_id::integer AS id,
            string_to_array(autor, '; ') AS authors,
            jahr::integer AS year,
            quelle AS source,
            publikation_typ_id::integer AS category_id,
            publikation_dokumenttyp_id::integer AS document_id,
            sci_id AS sci,
            pubmed_id AS pubmed,
            doi AS doi,
            pmc_id AS pmc,
            abstract AS abstract_bytes
        FROM
            "research"."publikation"
        ''',
        '''
        CREATE UNIQUE INDEX research_publication_id_idx ON "public"."research_publication" ("id");
        ''',
        '''
        CREATE INDEX research_publication_year_idx ON "public"."research_publication" ("year");
        ''',
        '''
        CREATE INDEX research_publication_category_id_idx ON "public"."research_publication" ("category_id");
        ''',
        '''
        CREATE INDEX research_publication_document_id_idx ON "public"."research_publication" ("document_id");
        ''',
    ]
    reverse = [
        '''
        DROP INDEX IF EXISTS research_publication_document_id_idx;
        ''',
        '''
        DROP INDEX IF EXISTS research_publication_category_id_idx;
        ''',
        '''
        DROP INDEX IF EXISTS research_publication_year_idx;
        ''',
        '''
        DROP INDEX IF EXISTS research_publication_id_idx;
        ''',
        '''
        DROP INDEX IF EXISTS research_publication_id_idx;
        ''',
        '''
        DROP INDEX IF EXISTS research_publication_id_idx;
        ''',
        '''
        DROP MATERIALIZED VIEW IF EXISTS "public"."research_publication";
        ''',
        '''
        DROP INDEX IF EXISTS research_document_id_idx;
        ''',
        '''
        DROP MATERIALIZED VIEW IF EXISTS "public"."research_document";
        ''',
        '''
        DROP INDEX IF EXISTS research_category_id_idx;
        ''',
        '''
        DROP MATERIALIZED VIEW IF EXISTS "public"."research_category";
        ''',
        '''
        DROP INDEX IF EXISTS research_publication_organization_organization_id_idx;
        ''',
        '''
        DROP INDEX IF EXISTS research_publication_organization_publication_id_idx;
        ''',
        '''
        DROP INDEX IF EXISTS research_publication_organization_idx;
        ''',
        '''
        DROP MATERIALIZED VIEW IF EXISTS "public"."research_publication_organization";
        ''',
        '''
        DROP INDEX IF EXISTS research_publication_person_person_id_idx;
        ''',
        '''
        DROP INDEX IF EXISTS research_publication_person_publication_id_idx;
        ''',
        '''
        DROP INDEX IF EXISTS research_publication_person_idx;
        ''',
        '''
        DROP MATERIALIZED VIEW IF EXISTS "public"."research_publication_person";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."publikation";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."publikation_dokumenttyp";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."publikation_typ";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."orgeinheit_publikation";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."orgeinheit_campusonline";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."person_publikation";
        ''',
        '''
        DROP FOREIGN TABLE IF EXISTS "research"."person_campusonline";
        ''',
    ]

    dependencies = [
        ('base', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL(
            forward,
            reverse
        )
    ]
